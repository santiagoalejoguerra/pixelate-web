{"version":3,"sources":["components/Image.js","components/PixelateItem.js","components/PixelateGroup.js","utils/ImageUtils.js","conf/DefaultParameters.js","components/Main.js","components/Thumbnail.js","components/Product.js","App.js","serviceWorker.js","index.js","images/britta.png","images/oferton.png"],"names":["Image","props","state","crop","unit","width","height","onCropChange","percentCrop","setState","onCropComplete","makeClientCrop","onImageLoaded","image","imageRef","console","log","this","callbackImgCropped","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","error","src","croppedImageUrl","className","ruleOfThirds","onComplete","onChange","PureComponent","PixelateItem","type","distance","color","style","marginLeft","backgroundColor","Component","PixelateGroup","arrayColors","counts","palette","paletteSelected","createImage","withPalette","pixelsToConvert","cropWidth","cropHeight","heightPixels","Array","Math","floor","keys","widthPixels","img","xColorPick","yColorPick","context","cropY","cropX","pixelSize","isNaN","heightWitPixelSize","widthWithPixelSize","rgba","getImageData","data","length","similarColor","push","paintPixels","dictionary","forEach","index","pixelsConverted","count","map","n","key","margin","display","nm","convertPixels","Object","JSON","stringify","React","colorSim","rgbColor","compareColor","i","d","sqrt","actualColor","selectedColor","currentSim","square","imageUtils","britta","aspect","Main","defaultParameters","handleInputChange","event","target","value","checked","handleInputChangeFile","files","onload","handleInputChangePalette","nameArray","split","nameColor","Number","filter","includes","every","v","imgCropped","file","accept","defaultValue","find","found","Thumbnail","images","currentImage","gutter","justify","activeCss","span","Product","feature","model","saleCount","description","price","botons","pow","prueba","next","prev","countBotons","digits","log10","zerosDigits","final","oferton","align","LeftCircleOutlined","fontSize","onClick","RightCircleOutlined","disabled","allowHalf","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.d7f0018c.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass Image extends PureComponent {\n\n    constructor(props) {\n\n        super(props);\n\n        //this.callbackImgCropped = props.callbackImgProps;\n\n        console.log(\"Paso el constructor\");\n\n    }\n\n    state = {\n        crop: {\n          unit: '%',\n          width: 100,\n          height: 100\n        },\n      };\n\n      onCropChange = (crop, percentCrop) => {\n        this.setState({ crop });\n      };\n\n    onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n\n    onImageLoaded = image => {\n        this.imageRef = image;\n      };\n\n    async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          this.props.callbackImgCropped({ image: this.imageRef, crop: crop});\n        }\n      }\n    \n    getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        );\n\n        //return { image: image, crop: crop };\n    \n         return new Promise((resolve, reject) => {\n\n        //     resolve({ image: image, crop: crop });\n\n        //  });\n          canvas.toBlob(blob => {\n            if (!blob) {\n              //reject(new Error('Canvas is empty'));\n              console.error('Canvas is empty');\n              return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n          }, 'image/jpeg');\n        })\n      }\n        \n    render() {\n\n        const { src } = this.props;\n\n        const { crop, croppedImageUrl } = this.state;\n\n        return (\n            <div className=\"App\">\n                <ReactCrop \n                    src={src} \n                    ruleOfThirds\n                    onComplete={this.onCropComplete}\n                    onImageLoaded={this.onImageLoaded}\n                    crop={crop} \n                    onChange={this.onCropChange} />\n                {/* {croppedImageUrl && (\n                <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n                )} */}\n            </div>\n        )\n\n    }\n\n}\n\nexport default Image","import React, { Component } from 'react';\n\nclass PixelateItem extends Component {\n\n    render() {\n\n        const { type, distance, color } = this.props;\n\n        return (\n            <div className={'pixelateItem ' + type} style={{marginLeft: distance, backgroundColor: color}}>\n                \n            </div>\n        );\n    }\n}\n\nexport default PixelateItem;","import React from 'react';\nimport PixelateItem from './PixelateItem';\n\nclass PixelateGroup extends React.Component {\n\n    image = new Image();\n\n    arrayColors = [];\n\n    counts = {};\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            distance: 1,\n            palette: props.paletteSelected\n        };\n\n    }\n\n    createImage(src) {\n\n        this.image = src || new Image();\n\n        this.image.height = this.image.height | 1;\n\n        this.image.width = this.image.width | 1;\n\n    }\n\n    render() {\n\n        this.createImage(this.props.image);\n\n        const { withPalette, type, distance, pixelsToConvert, paletteSelected, crop } = this.props;\n\n        const cropWidth = crop ? crop.width : this.image.width;\n        const cropHeight = crop ? crop.height : this.image.height;\n\n        const heightPixels = [...Array(Math.floor((cropHeight * pixelsToConvert) / cropWidth) + 1).keys()];\n\n        const widthPixels = [...Array(pixelsToConvert).keys()];\n\n        this.arrayColors = [];\n\n        this.arrayColors = paintPixels(this.image, pixelsToConvert, paletteSelected, withPalette, crop);\n\n        this.counts = {};\n\n        let dictionary = {};\n\n        this.arrayColors.forEach((color, index) => {\n            this.counts[color] = (this.counts[color] + 1) || 1;\n\n             dictionary[index] = \n                 [[Math.floor(index / pixelsToConvert), index % pixelsToConvert],\n                 [color[0], color[1], color[2]]]\n            \n        });\n\n        const pixelsConverted = convertPixels(heightPixels, widthPixels, type, distance, this.arrayColors);\n\n        const counts = this.counts;\n\n        return <div className=\"pixeled\">\n            <div style={{backgroundColor: 'gray'}}>\n                { pixelsConverted }\n            </div>\n            <h1>Quantity of different colors</h1> \n            <div>\n                {\n                    Object.keys(this.counts).map(function(key){\n                        return <div key={key}> { key + ' - ' + counts[key] }</div>\n                    })\n                }\n            </div>\n            <h1>Dictionary</h1>\n             <div>\n                {\n                    JSON.stringify(dictionary)\n                }\n            </div>\n        </div>;\n    }\n}\n\nexport default PixelateGroup;\n\nfunction convertPixels(height, width, type, distance, arrayColors) {\n\n    var count = 0;\n\n    const colorDefault = 'black';\n\n    var color;\n\n    return height.map(n => {\n        return <div width=\"100%\" key={n} style={{ margin: distance - 8, display: \"block ruby\" }}>\n            {\n\n                color = arrayColors && arrayColors[count] ?\n\n                    width.map(nm => {\n\n                        color = arrayColors && arrayColors[count] ? arrayColors[count++] : colorDefault;\n    \n                        return <PixelateItem key={n + '' + nm} \n                            type={type} \n                            distance={distance} \n                            color={`rgba(${color[0]},${color[1]},${color[2]},${(255)})`} />\n                    })\n\n                    :\n\n                    <div></div>\n\n                }\n        </div>;\n    });\n}\n\nfunction paintPixels(img, pixelsToConvert, palette, withPalette, crop) {\n\n    const arrayColors = [];\n\n    let xColorPick;\n    let yColorPick;\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    const width = crop ? crop.width : img.width;\n    const height = crop ? crop.height : img.height;\n\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    const cropY = crop ? crop.y : 0;\n    const cropX = crop ? crop.x : 0;\n\n    const pixelSize = (width / (pixelsToConvert - 1)) + 0.0000000001;\n\n    context.drawImage(img, 0, 0, img.width, img.height);\n\n    if (!isNaN(pixelSize) && pixelSize > 0) {\n\n        const heightWitPixelSize = height + pixelSize + cropY;\n\n        const widthWithPixelSize = width + pixelSize + cropX;\n\n        //console.log(\"pixelSize:\", pixelSize, \"crop:\", cropX, cropY, \"size:\", width, height, \"added:\", (width + cropX), \"withPixel:\", widthWithPixelSize, heightWitPixelSize);\n\n        for (let y = cropY; y < heightWitPixelSize; y += pixelSize) {\n            for (let x = cropX; x < widthWithPixelSize; x += pixelSize) {\n                xColorPick = x;\n                yColorPick = y;\n\n                if (x >= (width + cropX)) {\n                    xColorPick = x - (pixelSize - (width % pixelSize) / 2) + 1;\n                }\n                if (y >= height) {\n                    yColorPick = y - (pixelSize - (height % pixelSize) / 2) + 1;\n                }\n\n                let rgba = context.getImageData(xColorPick, yColorPick, 1, 1).data;\n\n                if (withPalette && palette.length > 0) {\n\n                    rgba = similarColor(rgba, palette);\n\n                } \n\n                arrayColors.push(rgba);\n\n            }\n        }\n      \n    }\n\n    return arrayColors;\n}\n\nfunction colorSim(rgbColor, compareColor) {\n    let i;\n\n    let d = 0;\n\n    for (i = 0; i < 3; i++) {\n        d += (rgbColor[i] - compareColor[i]) * (rgbColor[i] - compareColor[i]);\n    }\n\n    return Math.sqrt(d);\n}\n\nfunction similarColor(actualColor, palette) {\n\n    let selectedColor = [];\n\n    let currentSim = colorSim(actualColor, palette[0]);\n\n    palette.forEach(color => {\n        if (colorSim(actualColor, color) <= currentSim) {\n            selectedColor = color;\n            currentSim = colorSim(actualColor, color);\n        }\n    });\n\n    return selectedColor;\n\n}","const createImage = src => {\n\n    const image = new Image();\n\n    image.src = src;\n\n    return image;\n\n}\n\nexport default {\n    createImage\n}","import imageUtils from '../utils/ImageUtils';\n\nimport britta from '../images/britta.png';\n\nconst palette = [\n    [140,143,174],\n    [88,69,99],\n    [62,33,55],\n    [154,99,72],\n    [215,155,125],\n    [245,237,186],\n    [192,199,65],\n    [100,125,52],\n    [228,148,58],\n    [157,48,59],\n    [210,100,113],\n    [112,55,127],\n    [126,196,193],\n    [52,133,157],\n    [23,67,75],\n    [31,14,28],\n    [0,0,0],\n    [255,255,255]\n  ]\n\nconst crop = { aspect: 16 / 9 };\n\nexport default {\n    withPalette: true,\n    square: false,\n    distance: 1,\n    pixelsToConvert: 5,\n    paletteSelected: palette,\n    image: imageUtils.createImage(britta),\n    crop: crop\n}","import React, { Component } from 'react';\nimport Image from './Image';\nimport PixelateGroup from './PixelateGroup';\nimport defaultParameters from '../conf/DefaultParameters';\nimport imageUtils from '../utils/ImageUtils';\n\nclass Main extends Component {\n\n    palette = defaultParameters.paletteSelected;\n\n    state = defaultParameters;\n\n    handleInputChange = (event) => {\n        const target = event.target;\n\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value    \n        });\n\n    }\n\n    handleInputChangeFile = (event) => {\n        const target = event.target;\n\n        const value = URL.createObjectURL(target.files[0])\n\n        const image = imageUtils.createImage(value);\n\n        image.onload = () => {\n\n            this.setState({\n                image: image   \n            });\n\n        }\n\n    }\n\n    handleInputChangePalette = (event) => {\n\n        const target = event.target;\n\n        const value = target.checked;\n\n        const name = target.name;\n\n        const nameArray = name.split(\",\");\n\n        const nameColor = [ Number(nameArray[0]), Number(nameArray[1]), Number(nameArray[2]) ];\n\n        console.log(nameColor);\n\n        if (value) {\n\n            const palette = this.state.paletteSelected;\n\n            palette.push(nameColor);\n\n            this.setState({ paletteSelected: palette})\n        } else {\n\n            const palette = this.state.paletteSelected;\n\n            this.setState({ paletteSelected: palette.filter(color => {\n\n                console.log(color, nameColor, color.includes(nameColor), color.every(v => nameColor.includes(v)));\n                \n                return !color.every(v => nameColor.includes(v));\n                \n            })})\n        }\n\n    }\n\n    callbackImgCropped = (imgCropped) => {\n\n        this.setState({ imgCropped });\n\n    }\n\n    render() {\n\n        const { withPalette, square, distance, pixelsToConvert, file, image, imgCropped } = this.state;\n\n        console.log(\"Img cropped:\", imgCropped ? imgCropped.crop : '');\n        \n        return (\n            <div className=\"App\">\n                <div>\n                    <div className=\"main\">\n                        <div className=\"App-img\">\n                            {/* <img src={image.src} className=\"img\" alt=\"img\" /> */}\n                            {/* <ReactCrop src={image.src} className=\"img\" /> */}\n                            <Image src={image.src} callbackImgCropped={this.callbackImgCropped} />\n                        </div>\n                        <div className=\"parameters\">\n                            <div>\n                                Load image <br />\n                                <input\n                                    name=\"file\" type=\"file\"\n                                    checked={file}\n                                    accept=\"image/*\"\n                                    onChange={this.handleInputChangeFile} />\n                            </div>\n                            <div>\n                                With limited palette? \n                                <input\n                                    name=\"withPalette\" type=\"checkbox\"\n                                    checked={withPalette}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                            <div>\n                                Square? \n                                <input\n                                    name=\"square\" type=\"checkbox\"\n                                    checked={square}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                            <div>\n                                Pixels throughout: \n                                <input\n                                    name=\"pixelsToConvert\" type=\"number\"\n                                    defaultValue={this.state.pixelsToConvert}\n                                    checked={pixelsToConvert}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                        </div>\n                        <div className=\"parameters\">\n                            <div>\n                                Select palette colors\n                                {\n                                    this.palette.map((color, index) => {\n                                        return <div key={color} \n                                        style={{\n                                            backgroundColor: `rgba(${color[0]},${color[1]},${color[2]},${(255)})`,\n                                            color: `rgba(${255 - color[0]},${255 - color[1]},${255 - color[2]},${(255)})`}} ><input \n                                            name={color}\n                                            type=\"checkbox\"\n                                            checked={this.state.paletteSelected.find(found => found === color)}\n                                            onChange={this.handleInputChangePalette} />\n                                                <label>{color[0] + \" \" + color[1] + \" \" + color[2]}</label>\n                                            </div>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <PixelateGroup \n                        image={imgCropped && imgCropped.image}\n                        crop={imgCropped && imgCropped.crop}\n                        withPalette={withPalette}\n                        type={square ? 'square' : 'circle'}\n                        distance={distance}\n                        paletteSelected={this.state.paletteSelected}\n                        pixelsToConvert={Number(pixelsToConvert)}\n                    />\n                </div>\n            </div>\n        );\n        \n    }\n}\n\n\nexport default Main;","import React, { Component } from 'react';\nimport { Col, Row } from 'antd';\n\nclass Thumbnail extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n        render() {\n\n            const { images, currentImage } = this.props;\n\n            return  <Row gutter={[32, 16]} justify=\"center\">\n                { \n                    images.map((image, index) => {\n\n                        const activeCss =  (currentImage === index) ? 'active' : '';\n\n                        console.log(currentImage, index, activeCss);\n\n                        return <Col span={21} key={index}> \n                            <img src={image} width=\"100%\" className={\"thumbnail \" + activeCss} /> \n                        </Col>\n                    })\n                }\n            </Row>;\n\n        }\n    }\n\nexport default Thumbnail;","import React, { Component, setState } from 'react';\nimport imageUtils from '../utils/ImageUtils';\n\nimport { Rate } from 'antd';\nimport { Row, Col } from 'antd';\nimport Thumbnail from './Thumbnail';\n\nimport {\n    LeftCircleOutlined,\n    RightCircleOutlined\n} from '@ant-design/icons';\n\nimport britta from '../images/britta.png';\nimport oferton from '../images/oferton.png';\n\nclass Product extends Component {\n\n    state = {\n        feature: {\n            model: \"Square\",\n            saleCount: \"131\",\n            description: \"Cuadro mosaico con foto propia (80x80 cm) / Pixelate modelo Square / Podes regalar a tu familiar, amigo, vecino, ¡o incluso ocupar la pared de tu living!\",\n            price: \"3200\",\n            botons: Math.pow(80, 2)\n        },\n        currentImage: 0,\n        prueba: 'Pruebita'\n    }\n\n    next = () => {\n        const currentImage = this.state.currentImage + 1;\n        this.setState({ currentImage });\n      }\n    \n      prev = () => {\n        const currentImage = this.state.currentImage - 1;\n        this.setState({ currentImage });\n      }\n\n    render() {\n\n        const { prueba, currentImage, feature } = this.state;\n\n        const countBotons = feature.botons;\n        const digits = Math.floor(Math.log10(countBotons));\n        const zerosDigits = Math.pow(10, digits);\n        const unit = Math.floor(countBotons / zerosDigits);\n        const final = unit * zerosDigits;\n\n        console.log(countBotons, digits, unit, zerosDigits, final);\n\n        const images = [ britta, oferton ];\n        \n        return (\n            <div className=\"Product\">\n                <Row justify=\"space-around\">\n                    <Col span={15}>\n                        <Row justify=\"space-around\" align=\"middle\" gutter={[48, 32]}>\n                            <Col span={4}>\n                                <Thumbnail images={images} currentImage={currentImage}/>\n                            </Col>\n                            <Col span={20}>\n                                <Row justify=\"space-between\" align=\"middle\">\n                                    <Col span={1} align=\"center\">\n                                        {currentImage > 0 && (\n                                            <LeftCircleOutlined style={{ fontSize: '16px' }} onClick={this.prev} />\n                                        )}\n                                    </Col>\n                                    <Col span={22}>   \n                                        <img src={images[currentImage]} width=\"100%\" className=\"preview\"/>\n                                    </Col>\n                                    <Col span={1} align=\"center\">\n                                        {currentImage < images.length - 1 && (\n                                            <RightCircleOutlined style={{ fontSize: '16px' }} onClick={this.next} />\n                                        )}\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col span={8}>\n                        <h4>{feature.model}</h4>\n                        <h4>{feature.saleCount} vendidas | <Rate disabled allowHalf defaultValue={4.5} /></h4>\n                        <h2>{feature.description}</h2>\n                        <h3>Cantidad de botonsitos: +{final}</h3>\n                        <h1>${feature.price}</h1>\n                        <h5>Iva incluido</h5>\n                    </Col>\n                </Row>\n                \n            </div>\n        );\n        \n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value    \n        });\n\n    }\n\n    handleInputChangeFile = (event) => {\n        const target = event.target;\n\n        const value = URL.createObjectURL(target.files[0])\n\n        const image = imageUtils.createImage(value);\n\n        image.onload = () => {\n\n            this.setState({\n                image: image   \n            });\n\n        }\n\n    }\n\n}\n\n\nexport default Product;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport './App.css';\nimport './css/Product.css'\nimport 'antd/dist/antd.css';\n\nimport Main from './components/Main';\nimport Product from './components/Product';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={'/'} component={Main} />\n        <Route exact path={'/product'} component={Product} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/britta.65342444.png\";","module.exports = __webpack_public_path__ + \"static/media/oferton.b81609ce.png\";"],"sourceRoot":""}