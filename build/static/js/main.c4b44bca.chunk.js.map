{"version":3,"sources":["images/britta.png","components/PixelateItem.js","components/PixelateGroup.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PixelateItem","this","props","type","distance","color","className","style","marginLeft","backgroundColor","Component","PixelateGroup","image","Image","arrayColors","counts","createImage","state","palette","withPalette","pixelsToConvert","src","onload","paintPixels","forEach","forceUpdate","height","Array","keys","width","dictionary","Object","index","Math","floor","pixelsConverted","count","map","n","key","margin","nm","convertPixels","backgroudColor","JSON","stringify","React","img","xColorPick","yColorPick","canvas","document","createElement","context","getContext","pixelSize","drawImage","isNaN","y","x","rgba","getImageData","data","similarColor","push","colorSim","rgbColor","compareColor","i","d","sqrt","actualColor","selectedColor","currentSim","Main","square","handleInputChange","event","target","value","checked","name","setState","britta","alt","onChange","defaultValue","Number","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4b44bca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/britta.65342444.png\";","import React, { Component } from 'react';\n\nclass PixelateItem extends Component {\n\n    render() {\n\n        const { type, distance, color } = this.props;\n\n        return (\n            <div className={'pixelateItem ' + type} style={{marginLeft: distance, backgroundColor: color}}>\n                \n            </div>\n        );\n    }\n}\n\nexport default PixelateItem;","import React from 'react';\nimport PixelateItem from './PixelateItem';\n\nclass PixelateGroup extends React.Component {\n\n    image = new Image();\n\n    arrayColors = [];\n\n    counts = {};\n\n    constructor(props) {\n\n        super(props);\n\n        this.createImage();\n\n        this.state = {\n            distance: 1,\n            palette: [\n                [140,143,174],\n                [88,69,99],\n                [62,33,55],\n                [154,99,72],\n                [215,155,125],\n                [245,237,186],\n                [192,199,65],\n                [100,125,52],\n                [228,148,58],\n                [157,48,59],\n                [210,100,113],\n                [112,55,127],\n                [126,196,193],\n                [52,133,157],\n                [23,67,75],\n                [31,14,28],\n                [0,0,0],\n                [255,255,255]\n              ]\n        };\n\n    }\n\n    createImage() {\n\n        const { withPalette, pixelsToConvert } = this.props;\n\n        this.image.src = this.props.src;\n        this.image.onload = () => {\n             this.arrayColors = paintPixels(this.image, pixelsToConvert, this.state.palette, withPalette);\n             this.arrayColors.forEach(color => {\n                this.counts[color] = (this.counts[color] + 1) || 1;\n            });\n             this.forceUpdate();\n        };\n\n    }\n\n    render() {\n\n        const { withPalette, type, distance, pixelsToConvert } = this.props;\n\n        const height = [...Array(pixelsToConvert).keys()];\n        \n        const width = [...Array(pixelsToConvert).keys()];\n\n        this.arrayColors = [];\n\n        this.arrayColors = paintPixels(this.image, pixelsToConvert, this.state.palette, withPalette);\n\n        this.counts = {};\n\n        let dictionary = new Object();\n\n        this.arrayColors.forEach((color, index) => {\n            this.counts[color] = (this.counts[color] + 1) || 1;\n\n            //console.log(index, pixelsToConvert, index % pixelsToConvert, Math.floor(index / pixelsToConvert));\n\n             dictionary[index] = \n                 [[Math.floor(index / pixelsToConvert), index % pixelsToConvert],\n                 [color[0], color[1], color[2]]]\n            \n        });\n\n        const pixelsConverted = convertPixels(height, width, type, distance, this.arrayColors);\n\n        const counts = this.counts;\n\n        return <div style={{backgroudColor: 'black'}}>\n            { pixelsConverted }\n            <h1>Quantity of different colors</h1> \n            <div>\n                {\n                    Object.keys(this.counts).map(function(key){\n                        return <div key={key}> { key + ' - ' + counts[key] }</div>\n                    })\n                }\n            </div>\n            <h1>Dictionary</h1>\n             <div>\n                {\n                    JSON.stringify(dictionary)\n                }\n            </div>\n        </div>;\n    }\n}\n\nexport default PixelateGroup;\n\nfunction convertPixels(height, width, type, distance, arrayColors) {\n\n    var count = 0;\n\n    const colorDefault = 'black';\n\n    //\n\n    var color;\n\n    return height.map(n => {\n        return <div key={n} style={{ margin: distance - 8 }}>\n            {\n\n                width.map(nm => {\n\n                    color = arrayColors ? arrayColors[count++] : colorDefault;\n\n                    return <PixelateItem key={n + '' + nm} \n                        type={type} \n                        distance={distance} \n                        color={`rgba(${color[0]},${color[1]},${color[2]},${(255)})`} />\n                })\n            }\n        </div>;\n    });\n}\n\nfunction paintPixels(img, pixelsToConvert, palette, withPalette) {\n\n    const arrayColors = [];\n\n    let xColorPick;\n    let yColorPick;\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    const width = img.width;\n    const height = img.height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const pixelSize = (height / (pixelsToConvert - 1)) + 0.0000000001;\n\n    context.drawImage(img, 0, 0, width, height);\n\n    if (!isNaN(pixelSize) && pixelSize > 0) {\n\n        for (let y = 0; y < img.height + pixelSize; y += pixelSize) {\n            for (let x = 0; x < img.width + pixelSize; x += pixelSize) {\n                xColorPick = x;\n                yColorPick = y;\n\n                if (x >= img.width) {\n                    xColorPick = x - (pixelSize - (img.width % pixelSize) / 2) + 1;\n                }\n                if (y >= img.height) {\n                    yColorPick = y - (pixelSize - (img.height % pixelSize) / 2) + 1;\n                }\n\n                let rgba = context.getImageData(xColorPick, yColorPick, 1, 1).data;\n\n                if (withPalette) {\n\n                    rgba = similarColor(rgba, palette);\n\n                } \n\n                arrayColors.push(rgba);\n\n            }\n        }\n      \n    }\n\n    return arrayColors;\n}\n\nfunction colorSim(rgbColor, compareColor) {\n    let i;\n\n    let d = 0;\n\n    for (i = 0; i < 3; i++) {\n        d += (rgbColor[i] - compareColor[i]) * (rgbColor[i] - compareColor[i]);\n    }\n\n    return Math.sqrt(d);\n}\n\nfunction similarColor(actualColor, palette) {\n\n    let selectedColor = [];\n\n    let currentSim = colorSim(actualColor, palette[0]);\n\n    palette.forEach(color => {\n        if (colorSim(actualColor, color) <= currentSim) {\n            selectedColor = color;\n            currentSim = colorSim(actualColor, color);\n        }\n    });\n\n    return selectedColor;\n\n}","import React, { Component } from 'react';\n\nimport britta from '../images/britta.png';\nimport PixelateGroup from './PixelateGroup';\n\nclass Main extends Component {\n\n    state = {\n        withPalette: true,\n        square: false,\n        distance: 1,\n        pixelsToConvert: 40\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value    \n        });\n\n    }\n\n    render() {\n\n        const { withPalette, square, distance, pixelsToConvert } = this.state;\n        \n        return (\n            <div>\n                <div>\n                    <img src={britta} className=\"App-logo\" alt=\"logo\" />\n                    <div>\n                        <div>\n                            With limited palette?\n                            <input\n                                name=\"withPalette\" type=\"checkbox\"\n                                checked={withPalette}\n                                onChange={this.handleInputChange} />\n                        </div>\n                        <div>\n                            Square?\n                            <input\n                                name=\"square\" type=\"checkbox\"\n                                checked={square}\n                                onChange={this.handleInputChange} />\n                        </div>\n                        {/* <div>\n                            Distance between bottons\n                            <input\n                                name=\"distance\" type=\"number\"\n                                checked={distance}\n                                onChange={this.handleInputChange} />\n                        </div> */}\n                        <div>\n                            Pixels throughout\n                            <input\n                                name=\"pixelsToConvert\" type=\"number\"\n                                defaultValue=\"40\"\n                                checked={pixelsToConvert}\n                                onChange={this.handleInputChange} />\n                        </div>\n                    </div>\n                </div>\n                <PixelateGroup \n                    src={britta}\n                    withPalette={withPalette}\n                    type={square ? 'square' : 'circle'}\n                    distance={distance}\n                    pixelsToConvert={Number(pixelsToConvert)}\n                />\n            </div>\n        );\n        \n    }\n}\n\nexport default Main;","import React from 'react';\n\nimport './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}