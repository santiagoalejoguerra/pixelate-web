{"version":3,"sources":["components/Image.js","components/PixelateItem.js","components/PixelateGroup.js","utils/ImageUtils.js","conf/DefaultParameters.js","components/Main.js","components/Thumbnail.js","components/UploaderFileImage.js","components/PreviewProduct.js","conf/WallsConfig.js","components/Product.js","App.js","serviceWorker.js","index.js","images/britta.png","images/wall_1.jpg","images/wall_2.jpg","images/wall_3.jpg"],"names":["Image","props","state","crop","aspect","unit","width","height","onCropChange","percentCrop","setState","onCropComplete","makeClientCrop","onImageLoaded","image","imageRef","console","log","this","callbackImgCropped","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","error","src","croppedImageUrl","className","ruleOfThirds","keepSelection","onComplete","onChange","PureComponent","PixelateItem","type","distance","color","style","marginLeft","backgroundColor","Component","PixelateGroup","arrayColors","counts","palette","paletteSelected","createImage","withPalette","pixelsToConvert","cropWidth","cropHeight","heightPixels","Array","Math","floor","keys","widthPixels","img","xColorPick","yColorPick","context","cropY","cropX","pixelSize","isNaN","heightWitPixelSize","widthWithPixelSize","rgba","getImageData","data","length","similarColor","push","paintPixels","dictionary","forEach","index","pixelsConverted","count","map","n","key","margin","display","nm","convertPixels","Object","JSON","stringify","React","colorSim","rgbColor","compareColor","i","d","sqrt","actualColor","selectedColor","currentSim","square","imageUtils","britta","Main","defaultParameters","handleInputChange","event","target","value","checked","handleInputChangeFile","files","onload","handleInputChangePalette","nameArray","split","nameColor","Number","filter","includes","every","v","imgCropped","file","accept","defaultValue","find","found","Thumbnail","images","currentImage","onClick","gutter","justify","activeCss","span","UploaderFileImage","showModal","modalVisible","handleOk","e","walls","putPictureOnImageCropped","handleCancel","imageUrl","loading","undefined","uploadButton","LoadingOutlined","PlusOutlined","onFinalizeOK","onFinalizeCancel","title","visible","onOk","onCancel","alt","PreviewProduct","product","wall1","pictureOn","wall2","wall3","Product","feature","model","saleCount","description","price","botons","pow","picture","next","prev","changeImage","updatePictureOnImageCropped","pictureCropped","wall","ctx","pictureImage","pWidth","pHeight","dataUrl","toDataURL","Walls","putPictureOnImage","updatePicture","wallImage","imagesState","onPreview","a","url","reader","FileReader","readAsDataURL","originFileObj","result","open","write","outerHTML","handleChange","info","status","callback","addEventListener","getBase64","countBotons","digits","log10","zerosDigits","final","align","LeftCircleOutlined","fontSize","RightCircleOutlined","disabled","allowHalf","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.edd2fedd.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass Image extends PureComponent {\n\n    constructor(props) {\n\n        super(props);\n\n        //this.callbackImgCropped = props.callbackImgProps;\n\n        console.log(\"Paso el constructor\");\n\n    }\n\n    state = {\n        crop: {\n          aspect: 1/1,\n          unit: '%',\n          width: 75,\n          height: 75\n        },\n      };\n\n      onCropChange = (crop, percentCrop) => {\n        this.setState({ crop });\n      };\n\n    onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n\n    onImageLoaded = image => {\n        this.imageRef = image;\n      };\n\n    async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          this.props.callbackImgCropped({ image: this.imageRef, crop: crop});\n        }\n      }\n    \n    getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        );\n    \n         return new Promise((resolve, reject) => {\n\n          canvas.toBlob(blob => {\n            if (!blob) {\n              console.error('Canvas is empty');\n              return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n          }, 'image/jpeg');\n        })\n      }\n        \n    render() {\n\n        const { src } = this.props;\n\n        const { crop, croppedImageUrl } = this.state;\n\n        return (\n            <div className=\"App\">\n                <ReactCrop \n                    src={src} \n                    ruleOfThirds\n                    keepSelection\n                    onComplete={this.onCropComplete}\n                    onImageLoaded={this.onImageLoaded}\n                    crop={crop} \n                    onChange={this.onCropChange} />\n                {/* {croppedImageUrl && (\n                <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n                )} */}\n            </div>\n        )\n\n    }\n\n}\n\nexport default Image","import React, { Component } from 'react';\n\nclass PixelateItem extends Component {\n\n    render() {\n\n        const { type, distance, color } = this.props;\n\n        return (\n            <div className={'pixelateItem ' + type} style={{marginLeft: distance, backgroundColor: color}}>\n                \n            </div>\n        );\n    }\n}\n\nexport default PixelateItem;","import React from 'react';\nimport PixelateItem from './PixelateItem';\n\nclass PixelateGroup extends React.Component {\n\n    image = new Image();\n\n    arrayColors = [];\n\n    counts = {};\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            distance: 1,\n            palette: props.paletteSelected\n        };\n\n    }\n\n    createImage(src) {\n\n        this.image = src || new Image();\n\n        this.image.height = this.image.height | 1;\n\n        this.image.width = this.image.width | 1;\n\n    }\n\n    render() {\n\n        this.createImage(this.props.image);\n\n        const { withPalette, type, distance, pixelsToConvert, paletteSelected, crop } = this.props;\n\n        const cropWidth = crop ? crop.width : this.image.width;\n        const cropHeight = crop ? crop.height : this.image.height;\n\n        const heightPixels = [...Array(Math.floor((cropHeight * pixelsToConvert) / cropWidth) + 1).keys()];\n\n        const widthPixels = [...Array(pixelsToConvert).keys()];\n\n        this.arrayColors = [];\n\n        this.arrayColors = paintPixels(this.image, pixelsToConvert, paletteSelected, withPalette, crop);\n\n        this.counts = {};\n\n        let dictionary = {};\n\n        this.arrayColors.forEach((color, index) => {\n            this.counts[color] = (this.counts[color] + 1) || 1;\n\n             dictionary[index] = \n                 [[Math.floor(index / pixelsToConvert), index % pixelsToConvert],\n                 [color[0], color[1], color[2]]]\n            \n        });\n\n        const pixelsConverted = convertPixels(heightPixels, widthPixels, type, distance, this.arrayColors);\n\n        const counts = this.counts;\n\n        return <div className=\"pixeled\">\n            <div style={{backgroundColor: 'gray'}}>\n                { pixelsConverted }\n            </div>\n            <h1>Quantity of different colors</h1> \n            <div>\n                {\n                    Object.keys(this.counts).map(function(key){\n                        return <div key={key}> { key + ' - ' + counts[key] }</div>\n                    })\n                }\n            </div>\n            <h1>Dictionary</h1>\n             <div>\n                {\n                    JSON.stringify(dictionary)\n                }\n            </div>\n        </div>;\n    }\n}\n\nexport default PixelateGroup;\n\nfunction convertPixels(height, width, type, distance, arrayColors) {\n\n    var count = 0;\n\n    const colorDefault = 'black';\n\n    var color;\n\n    return height.map(n => {\n        return <div width=\"100%\" key={n} style={{ margin: distance - 8, display: \"block ruby\" }}>\n            {\n\n                color = arrayColors && arrayColors[count] ?\n\n                    width.map(nm => {\n\n                        color = arrayColors && arrayColors[count] ? arrayColors[count++] : colorDefault;\n    \n                        return <PixelateItem key={n + '' + nm} \n                            type={type} \n                            distance={distance} \n                            color={`rgba(${color[0]},${color[1]},${color[2]},${(255)})`} />\n                    })\n\n                    :\n\n                    <div></div>\n\n                }\n        </div>;\n    });\n}\n\nfunction paintPixels(img, pixelsToConvert, palette, withPalette, crop) {\n\n    const arrayColors = [];\n\n    let xColorPick;\n    let yColorPick;\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    const width = crop ? crop.width : img.width;\n    const height = crop ? crop.height : img.height;\n\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    const cropY = crop ? crop.y : 0;\n    const cropX = crop ? crop.x : 0;\n\n    const pixelSize = (width / (pixelsToConvert - 1)) + 0.0000000001;\n\n    context.drawImage(img, 0, 0, img.width, img.height);\n\n    if (!isNaN(pixelSize) && pixelSize > 0) {\n\n        const heightWitPixelSize = height + pixelSize + cropY;\n\n        const widthWithPixelSize = width + pixelSize + cropX;\n\n        //console.log(\"pixelSize:\", pixelSize, \"crop:\", cropX, cropY, \"size:\", width, height, \"added:\", (width + cropX), \"withPixel:\", widthWithPixelSize, heightWitPixelSize);\n\n        for (let y = cropY; y < heightWitPixelSize; y += pixelSize) {\n            for (let x = cropX; x < widthWithPixelSize; x += pixelSize) {\n                xColorPick = x;\n                yColorPick = y;\n\n                if (x >= (width + cropX)) {\n                    xColorPick = x - (pixelSize - (width % pixelSize) / 2) + 1;\n                }\n                if (y >= height) {\n                    yColorPick = y - (pixelSize - (height % pixelSize) / 2) + 1;\n                }\n\n                let rgba = context.getImageData(xColorPick, yColorPick, 1, 1).data;\n\n                if (withPalette && palette.length > 0) {\n\n                    rgba = similarColor(rgba, palette);\n\n                } \n\n                arrayColors.push(rgba);\n\n            }\n        }\n      \n    }\n\n    return arrayColors;\n}\n\nfunction colorSim(rgbColor, compareColor) {\n    let i;\n\n    let d = 0;\n\n    for (i = 0; i < 3; i++) {\n        d += (rgbColor[i] - compareColor[i]) * (rgbColor[i] - compareColor[i]);\n    }\n\n    return Math.sqrt(d);\n}\n\nfunction similarColor(actualColor, palette) {\n\n    let selectedColor = [];\n\n    let currentSim = colorSim(actualColor, palette[0]);\n\n    palette.forEach(color => {\n        if (colorSim(actualColor, color) <= currentSim) {\n            selectedColor = color;\n            currentSim = colorSim(actualColor, color);\n        }\n    });\n\n    return selectedColor;\n\n}","const createImage = src => {\n\n    const image = new Image();\n\n    image.src = src;\n\n    return image;\n\n}\n\nexport default {\n    createImage\n}","import imageUtils from '../utils/ImageUtils';\n\nimport britta from '../images/britta.png';\n\nconst palette = [\n    [140,143,174],\n    [88,69,99],\n    [62,33,55],\n    [154,99,72],\n    [215,155,125],\n    [245,237,186],\n    [192,199,65],\n    [100,125,52],\n    [228,148,58],\n    [157,48,59],\n    [210,100,113],\n    [112,55,127],\n    [126,196,193],\n    [52,133,157],\n    [23,67,75],\n    [31,14,28],\n    [0,0,0],\n    [255,255,255]\n  ]\n\nconst crop = { aspect: 16 / 9 };\n\nexport default {\n    withPalette: true,\n    square: false,\n    distance: 1,\n    pixelsToConvert: 60,\n    paletteSelected: palette,\n    image: imageUtils.createImage(britta),\n    crop: crop\n}","import React, { Component } from 'react';\nimport Image from './Image';\nimport PixelateGroup from './PixelateGroup';\nimport defaultParameters from '../conf/DefaultParameters';\nimport imageUtils from '../utils/ImageUtils';\n\nclass Main extends Component {\n\n    palette = defaultParameters.paletteSelected;\n\n    state = defaultParameters;\n\n    handleInputChange = (event) => {\n        const target = event.target;\n\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value    \n        });\n\n    }\n\n    handleInputChangeFile = (event) => {\n        const target = event.target;\n\n        const value = URL.createObjectURL(target.files[0])\n\n        const image = imageUtils.createImage(value);\n\n        image.onload = () => {\n\n            this.setState({\n                image: image   \n            });\n\n        }\n\n    }\n\n    handleInputChangePalette = (event) => {\n\n        const target = event.target;\n\n        const value = target.checked;\n\n        const name = target.name;\n\n        const nameArray = name.split(\",\");\n\n        const nameColor = [ Number(nameArray[0]), Number(nameArray[1]), Number(nameArray[2]) ];\n\n        console.log(nameColor);\n\n        if (value) {\n\n            const palette = this.state.paletteSelected;\n\n            palette.push(nameColor);\n\n            this.setState({ paletteSelected: palette})\n        } else {\n\n            const palette = this.state.paletteSelected;\n\n            this.setState({ paletteSelected: palette.filter(color => {\n\n                console.log(color, nameColor, color.includes(nameColor), color.every(v => nameColor.includes(v)));\n                \n                return !color.every(v => nameColor.includes(v));\n                \n            })})\n        }\n\n    }\n\n    callbackImgCropped = (imgCropped) => {\n\n        this.setState({ imgCropped });\n\n    }\n\n    render() {\n\n        const { withPalette, square, distance, pixelsToConvert, file, image, imgCropped } = this.state;\n\n        console.log(\"Img cropped:\", imgCropped ? imgCropped.crop : '');\n        \n        return (\n            <div className=\"App\">\n                <div>\n                    <div className=\"main\">\n                        <div className=\"App-img\">\n                            {/* <img src={image.src} className=\"img\" alt=\"img\" /> */}\n                            {/* <ReactCrop src={image.src} className=\"img\" /> */}\n                            <Image src={image.src} callbackImgCropped={this.callbackImgCropped} />\n                        </div>\n                        <div className=\"parameters\">\n                            <div>\n                                Load image <br />\n                                <input\n                                    name=\"file\" type=\"file\"\n                                    checked={file}\n                                    accept=\"image/*\"\n                                    onChange={this.handleInputChangeFile} />\n                            </div>\n                            <div>\n                                With limited palette? \n                                <input\n                                    name=\"withPalette\" type=\"checkbox\"\n                                    checked={withPalette}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                            <div>\n                                Square? \n                                <input\n                                    name=\"square\" type=\"checkbox\"\n                                    checked={square}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                            <div>\n                                Pixels throughout: \n                                <input\n                                    name=\"pixelsToConvert\" type=\"number\"\n                                    defaultValue={this.state.pixelsToConvert}\n                                    checked={pixelsToConvert}\n                                    onChange={this.handleInputChange} />\n                            </div>\n                        </div>\n                        <div className=\"parameters\">\n                            <div>\n                                Select palette colors\n                                {\n                                    this.palette.map((color, index) => {\n                                        return <div key={color} \n                                        style={{\n                                            backgroundColor: `rgba(${color[0]},${color[1]},${color[2]},${(255)})`,\n                                            color: `rgba(${255 - color[0]},${255 - color[1]},${255 - color[2]},${(255)})`}} ><input \n                                            name={color}\n                                            type=\"checkbox\"\n                                            checked={this.state.paletteSelected.find(found => found === color)}\n                                            onChange={this.handleInputChangePalette} />\n                                                <label>{color[0] + \" \" + color[1] + \" \" + color[2]}</label>\n                                            </div>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <PixelateGroup \n                        image={imgCropped && imgCropped.image}\n                        crop={imgCropped && imgCropped.crop}\n                        withPalette={withPalette}\n                        type={square ? 'square' : 'circle'}\n                        distance={distance}\n                        paletteSelected={this.state.paletteSelected}\n                        pixelsToConvert={Number(pixelsToConvert)}\n                    />\n                </div>\n            </div>\n        );\n        \n    }\n}\n\n\nexport default Main;","import React, { Component } from 'react';\nimport { Col, Row } from 'antd';\n\nclass Thumbnail extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    render() {\n\n        const { images, currentImage, onClick } = this.props;\n\n        return  <Row gutter={[32, 16]} justify=\"center\">\n            { \n                images.map((image, index) => {\n\n                    const activeCss =  (currentImage === index) ? 'active' : '';\n\n                    return <Col span={21} key={index}> \n                        <img src={image} width=\"100%\" className={\"thumbnail \" + activeCss} onClick={onClick(index)} /> \n                    </Col>\n                })\n            }\n        </Row>;\n\n    }\n}\n\nexport default Thumbnail;","import React, { Component, Fragment } from 'react';\nimport { Button, message, Modal } from 'antd';\nimport imageUtils from '../utils/ImageUtils';\n\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport Image from './Image';\n\nclass UploaderFileImage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalVisible: false,\n            loading: false,\n            imageUrl: undefined\n        };\n    }\n\n    showModal = () => {\n        this.setState({\n            modalVisible: true,\n        });\n      };\n\n    handleOk  = e => {\n\n      const walls = this.props.walls;\n\n      this.props.putPictureOnImageCropped(this.state.imgCropped, walls[0]);\n\n      console.log(\"handle OK\");\n\n        this.setState({\n            modalVisible: false,\n        });\n      };\n    \n    handleCancel = e => {\n        this.setState({\n            modalVisible: false,\n        });\n      };\n\n      handleInputChangeFile = (event) => {\n        const target = event.target;\n\n        const value = URL.createObjectURL(target.files[0])\n\n        const image = imageUtils.createImage(value);\n\n        image.onload = () => {\n\n            this.setState({\n              imageUrl: image   \n            });\n\n        }\n\n    }\n\n    callbackImgCropped = (imgCropped) => {\n\n      this.setState({ imgCropped });\n\n    }\n\n    render() {\n\n        const uploadButton = (\n            <div>\n              {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\n              <div className=\"ant-upload-text\">Upload</div>\n            </div>\n          );\n\n        const { imageUrl } = this.state;\n\n        const { onFinalizeOK, onFinalizeCancel } = this.props;\n\n        return  <Fragment>\n            <Button type=\"primary\" onClick={this.showModal}>\n                Subir imagen\n            </Button>\n\n            <Modal\n                title=\"Imagen previsual\"\n                visible={this.state.modalVisible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                >\n                {/* <Button type=\"primary\"  onClick={this.showModal}>\n                    Subir archivo\n                </Button> */}\n\n                {imageUrl ? \n                  <Image \n                    src={imageUrl.src} \n                    callbackImgCropped={this.callbackImgCropped} \n                    alt=\"preview\" \n                    style={{ width: '100%' }} \n                  /> : \n                  <label className=\"custom-file-upload\">\n                    <input     \n                      name=\"file\" type=\"file\"\n                      accept=\"image/*\"\n                      onChange={this.handleInputChangeFile} />\n                        {uploadButton}\n                  </label> \n                }\n            </Modal>\n\n        </Fragment>\n\n    }\n}\n\nexport default UploaderFileImage;","import React, { Component, Fragment } from 'react';\n\n\nclass PreviewProduct extends Component {\n\n    render() {\n\n        const { product, images, currentImage } = this.props;\n\n        return (\n            <Fragment>\n                <img src={images[currentImage]} width=\"100%\" className=\"preview\"/>\n            </Fragment>\n        );\n    }\n}\n\nexport default PreviewProduct;","import wall1 from '../images/wall_1.jpg';\nimport wall2 from '../images/wall_2.jpg';\nimport wall3 from '../images/wall_3.jpg';\n\nconst walls = [\n    {\n        name: \"Wall 1\",\n        file: wall1,\n        pictureOn: {\n            x: 50,\n            y: 50,\n            width: 120,\n            height: 120.\n        }\n    },\n    {\n        name: \"Wall 2\",\n        file: wall2,\n        pictureOn: {\n            x: 255,\n            y: 70,\n            width: 350,\n            height: 350.\n        }\n    },\n    {\n        name: \"Wall 3\",\n        file: wall3,\n        pictureOn: {\n            x: 265,\n            y: 95,\n            width: 350,\n            height: 350.\n        }\n    }\n]\n\nexport default walls;","import React, { Component } from 'react';\nimport imageUtils from '../utils/ImageUtils';\n\nimport { Rate, message } from 'antd';\nimport { Row, Col } from 'antd';\nimport Thumbnail from './Thumbnail';\nimport UploaderFileImage from './UploaderFileImage';\n\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport {\n    LeftCircleOutlined,\n    RightCircleOutlined\n} from '@ant-design/icons';\n\nimport picture from '../images/britta.png';\nimport PreviewProduct from './PreviewProduct';\n\nimport Walls from '../conf/WallsConfig.js';\nimport walls from '../conf/WallsConfig.js';\n\nclass Product extends Component {\n\n    constructor(props) {\n        super(props);\n\n        Walls.map(wall => {\n            this.putPictureOnImage(picture, wall);\n        });\n    }\n\n    state = {\n        feature: {\n            model: \"Square\",\n            saleCount: \"131\",\n            description: \"Cuadro mosaico con foto propia (80x80 cm) / Pixelate modelo Square / Podes regalar a tu familiar, amigo, vecino, ¡o incluso ocupar la pared de tu living!\",\n            price: \"3200\",\n            botons: Math.pow(80, 2)\n        },\n        currentImage: 0,\n        images: [picture]\n    }\n\n    next = () => {\n        const currentImage = this.state.currentImage + 1;\n        this.setState({ currentImage });\n      }\n    \n    prev = () => {\n        const currentImage = this.state.currentImage - 1;\n        this.setState({ currentImage });\n      }\n\n    changeImage = currentImage => () => {\n        console.log(currentImage);\n        this.setState({ currentImage });\n    } \n\n    updatePictureOnImageCropped = (pictureCropped, wall) => {\n\n        console.log(\"updatePictureOnImage\", pictureCropped, wall);\n\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        const limit = 300;\n\n        canvas.width = limit;\n        canvas.height = limit;\n\n        const crop = pictureCropped.crop;\n\n        const pictureImage = new Image();\n\n        pictureImage.onload = () => {\n\n            const pWidth = pictureImage.width / pictureCropped.image.width;\n            const pHeight = pictureImage.height / pictureCropped.image.height;\n\n            ctx.drawImage(\n                pictureCropped.image, \n                crop.x * pWidth,\n                crop.y * pHeight,\n                crop.width * pWidth,\n                crop.height * pHeight,\n                0,\n                0,\n                limit,\n                limit\n                );\n\n            const dataUrl = canvas.toDataURL();\n\n            this.setState({ \n                images: [dataUrl]\n            });\n\n            Walls.map(wall => {\n                this.putPictureOnImage(dataUrl, wall);\n            });\n\n            this.setState({\n                updatePicture: dataUrl\n            });\n\n        };\n\n        console.log(\"image\", pictureCropped.image);\n\n        pictureImage.src = pictureCropped.image.src;\n\n    }\n\n    putPictureOnImage = (picture, wall) => {\n\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        const wallImage = new Image();\n\n        wallImage.src = wall.file;\n\n        wallImage.onload = () => {\n\n            canvas.width = wallImage.width;\n            canvas.height = wallImage.height;\n\n            ctx.drawImage(\n                wallImage, \n                0, \n                0, \n                wallImage.width, \n                wallImage.height\n                );\n\n            const pictureImage = new Image();\n\n            pictureImage.onload = () => {\n\n                ctx.drawImage(\n                    pictureImage, \n                    wall.pictureOn.x, \n                    wall.pictureOn.y, \n                    wall.pictureOn.width, \n                    wall.pictureOn.height\n                    );\n\n                const dataUrl = canvas.toDataURL();\n\n                const imagesState = this.state.images;\n\n                imagesState.push(dataUrl);\n    \n                this.setState({ \n                    images: imagesState\n                });\n\n            }\n\n            pictureImage.src = picture;\n\n        };\n\n    }\n\n    onPreview = async file => {\n        let src = file.url;\n        if (!src) {\n          src = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file.originFileObj);\n            reader.onload = () => resolve(reader.result);\n          });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow.document.write(image.outerHTML);\n      };\n\n    render() {\n\n        const { currentImage, feature, images, updatePicture } = this.state;\n\n        const countBotons = feature.botons;\n        const digits = Math.floor(Math.log10(countBotons));\n        const zerosDigits = Math.pow(10, digits);\n        const unit = Math.floor(countBotons / zerosDigits);\n        const final = unit * zerosDigits;\n\n        const uploadButton = (\n            <div>\n              {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\n              <div className=\"ant-upload-text\">Upload</div>\n            </div>\n          );\n        \n        return (\n            <div className=\"Product\">\n                <Row justify=\"space-around\">\n                    <Col span={15}>\n                        <Row justify=\"space-around\" align=\"middle\" gutter={[48, 32]}>\n                            <Col span={4}>\n                                <Thumbnail images={images} currentImage={currentImage} onClick={this.changeImage} />\n                            </Col>\n                            <Col span={20}>\n                                <Row justify=\"space-between\" align=\"middle\">\n                                    <Col span={1} align=\"center\">\n                                        {currentImage > 0 && (\n                                            <LeftCircleOutlined style={{ fontSize: '16px' }} onClick={this.prev} />\n                                        )}\n                                    </Col>\n                                    <Col span={22}>   \n                                        <PreviewProduct product={updatePicture || picture} images={images} currentImage={currentImage} />\n                                    </Col>\n                                    <Col span={1} align=\"center\">\n                                        {currentImage < images.length - 1 && (\n                                            <RightCircleOutlined style={{ fontSize: '16px' }} onClick={this.next} />\n                                        )}\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col span={8}>\n                        <h4>{feature.model}</h4>\n                        <h4>{feature.saleCount} vendidas | <Rate disabled allowHalf defaultValue={4.5} /></h4>\n                        <h2>{feature.description}</h2>\n                        <h3>Cantidad de botonsitos: +{final}</h3>\n                        <h1>${feature.price}</h1>\n                        <h5>Iva incluido</h5>\n\n                        <h3>Cargá tu imagen</h3>\n                        <Row>\n                            <Col>\n                                <img src={updatePicture || picture} alt=\"avatar\" style={{ width: '300px' }} />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <UploaderFileImage  putPictureOnImageCropped={this.updatePictureOnImageCropped} walls={walls}  />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                \n            </div>\n        );\n        \n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value    \n        });\n\n    }\n\n    handleInputChangeFile = (event) => {\n        const target = event.target;\n\n        const value = URL.createObjectURL(target.files[0])\n\n        const image = imageUtils.createImage(value);\n\n        image.onload = () => {\n\n            this.setState({\n                image: image   \n            });\n\n        }\n\n    }\n\n    handleChange = info => {\n        if (info.file.status === 'uploading') {\n          this.setState({ loading: true });\n          return;\n        }\n        if (info.file.status === 'done') {\n          // Get this url from response in real world.\n          getBase64(info.file.originFileObj, imageUrl =>\n            this.setState({\n              imageUrl,\n              loading: false,\n            }),\n          );\n        }\n      };\n\n}\n\nfunction beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n  }\n\n  function getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n\nexport default Product;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport './App.css';\nimport './css/Product.css'\nimport 'antd/dist/antd.css';\n\nimport Main from './components/Main';\nimport Product from './components/Product';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={'/'} component={Main} />\n        <Route exact path={'/product'} component={Product} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/britta.65342444.png\";","module.exports = __webpack_public_path__ + \"static/media/wall_1.fa841da1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wall_2.0b7a15b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wall_3.e5c6b3d8.jpg\";"],"sourceRoot":""}